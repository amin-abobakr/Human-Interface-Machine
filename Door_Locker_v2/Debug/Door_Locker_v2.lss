
Door_Locker_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080010c  0080010c  0000083c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001734  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000776  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aea  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  000033b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f5  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c8  00000000  00000000  00003b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  0000423d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	91 00       	.word	0x0091	; ????
  56:	99 00       	.word	0x0099	; ????
  58:	b7 00       	.word	0x00b7	; ????
  5a:	f3 00       	.word	0x00f3	; ????
  5c:	fb 00       	.word	0x00fb	; ????
  5e:	0a 01       	movw	r0, r20
  60:	03 01       	movw	r0, r6
  62:	14 03       	mulsu	r17, r20
  64:	f6 02       	muls	r31, r22
  66:	f8 02       	muls	r31, r24
  68:	fa 02       	muls	r31, r26
  6a:	fc 02       	muls	r31, r28
  6c:	fe 02       	muls	r31, r30
  6e:	00 03       	mulsu	r16, r16
  70:	02 03       	mulsu	r16, r18
  72:	04 03       	mulsu	r16, r20
  74:	06 03       	mulsu	r16, r22
  76:	08 03       	fmul	r16, r16
  78:	0a 03       	fmul	r16, r18
  7a:	0c 03       	fmul	r16, r20
  7c:	0e 03       	fmul	r16, r22
  7e:	10 03       	mulsu	r17, r16
  80:	12 03       	mulsu	r17, r18

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d4 e0       	ldi	r29, 0x04	; 4
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ec ef       	ldi	r30, 0xFC	; 252
  96:	f6 e0       	ldi	r31, 0x06	; 6
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	ac 30       	cpi	r26, 0x0C	; 12
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	ac e0       	ldi	r26, 0x0C	; 12
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a6 31       	cpi	r26, 0x16	; 22
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  b8:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <Buzzer_Init>:
#include "Buzzer.h"
#include "common.h"

void Buzzer_Init(void)
{
	SET_BIT(BUZZER_DDR,BUZZER_PIN_NO);
  c0:	a6 9a       	sbi	0x14, 6	; 20
  c2:	08 95       	ret

000000c4 <Buzzer_ON>:
}
void Buzzer_ON(void)
{
	SET_BIT(BUZZER_PORT,BUZZER_PIN_NO);
  c4:	ae 9a       	sbi	0x15, 6	; 21
  c6:	08 95       	ret

000000c8 <Buzzer_OFF>:
}
void Buzzer_OFF(void)
{
	CLR_BIT(BUZZER_PORT,BUZZER_PIN_NO);
  c8:	ae 98       	cbi	0x15, 6	; 21
  ca:	08 95       	ret

000000cc <main>:
//====================Variables=======================//
//====================================================//
	u8_t count_wrong=0;
	u8_t Check_Pwd;
	u8_t Choice=0;
	SystemStatevar=NEW_PWD;
  cc:	10 92 0c 01 	sts	0x010C, r1


//====================================================//
//==================Initialization====================//
//====================================================//
	UART_Init();
  d0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_Init>
	LCD_Init();
  d4:	0e 94 28 03 	call	0x650	; 0x650 <LCD_Init>
	LED_Init();
  d8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LED_Init>
	Buzzer_Init();
  dc:	0e 94 60 00 	call	0xc0	; 0xc0 <Buzzer_Init>

//====================================================//
//==================While Loop========================//
//====================================================//	
    
	Check_Pass_Existance=UART_RecieveByte();
  e0:	0e 94 a2 02 	call	0x544	; 0x544 <UART_RecieveByte>
	if (Check_Pass_Existance==PASSWORD_EXIST)
  e4:	89 36       	cpi	r24, 0x69	; 105
  e6:	79 f4       	brne	.+30     	; 0x106 <main+0x3a>
	{
		SystemStatevar=REPEAT_PWD;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 0c 01 	sts	0x010C, r24
		
		Check_Pwd=Recieve_PWD_Comp();
		
		      if (Check_Pwd==RIGHT_PASSWORD_1)
		      {
				  count_wrong=0;
  ee:	d0 e0       	ldi	r29, 0x00	; 0
			break;
//================== Close Door Case ==================//			 
		case CLOSE_DOOR:
			UART_SendByte(CLOSE_DOOR_1);
			CloseDoor();
			SystemStatevar=REPEAT_PWD;
  f0:	c1 e0       	ldi	r28, 0x01	; 1
			  {
				  LCD_ClearScreen();
				  LCD_DisplayString_XY("wrong choice",0xc0,0);
				  _delay_ms(1000);
				  LCD_ClearScreen(); 
				  SystemStatevar=OPTION_MENU;
  f2:	12 e0       	ldi	r17, 0x02	; 2
				  UART_SendByte('2');
				  SystemStatevar=CLOSE_DOOR;
			  } 
			  else if (Choice=='3')
			  {
				  SystemStatevar=CHANGE_PWD;
  f4:	05 e0       	ldi	r16, 0x05	; 5
			  }
			  else if (Choice=='2')
			  {
				  _delay_ms(10);
				  UART_SendByte('2');
				  SystemStatevar=CLOSE_DOOR;
  f6:	68 94       	set
  f8:	ee 24       	eor	r14, r14
  fa:	e2 f8       	bld	r14, 2
		      Choice=Option_Menu();
			  if (Choice=='1')
			  {
				  _delay_ms(10);
				  UART_SendByte('1');
				  SystemStatevar=OPEN_DOOR;
  fc:	0f 2e       	mov	r0, r31
  fe:	f3 e0       	ldi	r31, 0x03	; 3
 100:	ff 2e       	mov	r15, r31
 102:	f0 2d       	mov	r31, r0
 104:	03 c0       	rjmp	.+6      	; 0x10c <main+0x40>
	{
		SystemStatevar=REPEAT_PWD;
	}
	else
	{
		SystemStatevar=NEW_PWD;
 106:	10 92 0c 01 	sts	0x010C, r1
 10a:	f1 cf       	rjmp	.-30     	; 0xee <main+0x22>
	}
	
	while(1)
    {
        switch (SystemStatevar)
 10c:	80 91 0c 01 	lds	r24, 0x010C
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	87 30       	cpi	r24, 0x07	; 7
 116:	91 05       	cpc	r25, r1
 118:	e0 f7       	brcc	.-8      	; 0x112 <main+0x46>
 11a:	e6 5d       	subi	r30, 0xD6	; 214
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__tablejump2__>
        {
//=============== New Password Case ===================//
case NEW_PWD:
		UART_SendByte(NEW_PWD_1);
 122:	81 e5       	ldi	r24, 0x51	; 81
 124:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
		Scan_Pass_First();
 128:	0e 94 3c 01 	call	0x278	; 0x278 <Scan_Pass_First>
		SystemStatevar=REPEAT_PWD;
 12c:	c0 93 0c 01 	sts	0x010C, r28
		break;
 130:	ed cf       	rjmp	.-38     	; 0x10c <main+0x40>
//============ Repeating Password Case ===============//
case REPEAT_PWD:
		UART_SendByte(REPEAT_PWD_1);
 132:	82 e5       	ldi	r24, 0x52	; 82
 134:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
		Scan_Pass_Repeat();
 138:	0e 94 93 01 	call	0x326	; 0x326 <Scan_Pass_Repeat>
		UART_SendByte(Start_Compare_1);
 13c:	83 e5       	ldi	r24, 0x53	; 83
 13e:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
		
		Check_Pwd=Recieve_PWD_Comp();
 142:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Recieve_PWD_Comp>
		
		      if (Check_Pwd==RIGHT_PASSWORD_1)
 146:	84 35       	cpi	r24, 0x54	; 84
 148:	31 f4       	brne	.+12     	; 0x156 <main+0x8a>
		      {
				  count_wrong=0;
				  Correct_Pwd();
 14a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Correct_Pwd>
				  SystemStatevar=OPTION_MENU;
 14e:	10 93 0c 01 	sts	0x010C, r17
		
		Check_Pwd=Recieve_PWD_Comp();
		
		      if (Check_Pwd==RIGHT_PASSWORD_1)
		      {
				  count_wrong=0;
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	db cf       	rjmp	.-74     	; 0x10c <main+0x40>
				  Correct_Pwd();
				  SystemStatevar=OPTION_MENU;
		      } 
		      else if (Check_Pwd==WRONG_PASSWORD_1)
 156:	85 35       	cpi	r24, 0x55	; 85
 158:	c9 f6       	brne	.-78     	; 0x10c <main+0x40>
		      {
				  count_wrong++;
 15a:	df 5f       	subi	r29, 0xFF	; 255
				  if (count_wrong==3)
 15c:	d3 30       	cpi	r29, 0x03	; 3
 15e:	11 f4       	brne	.+4      	; 0x164 <main+0x98>
				  {
					  System_error();
 160:	0e 94 64 02 	call	0x4c8	; 0x4c8 <System_error>
				  }
				  Wrong_Pwd();
 164:	0e 94 00 02 	call	0x400	; 0x400 <Wrong_Pwd>
				  SystemStatevar=REPEAT_PWD;
 168:	c0 93 0c 01 	sts	0x010C, r28
 16c:	cf cf       	rjmp	.-98     	; 0x10c <main+0x40>
		      }
			break;
//================= Option Menu Case ==================//
		case OPTION_MENU:
		UART_SendByte(OPTION_MENU_1);
 16e:	86 e5       	ldi	r24, 0x56	; 86
 170:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
		      Choice=Option_Menu();
 174:	0e 94 12 02 	call	0x424	; 0x424 <Option_Menu>
			  if (Choice=='1')
 178:	81 33       	cpi	r24, 0x31	; 49
 17a:	61 f4       	brne	.+24     	; 0x194 <main+0xc8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	83 ec       	ldi	r24, 0xC3	; 195
 17e:	99 e0       	ldi	r25, 0x09	; 9
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xb4>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xba>
 186:	00 00       	nop
			  {
				  _delay_ms(10);
				  UART_SendByte('1');
 188:	81 e3       	ldi	r24, 0x31	; 49
 18a:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
				  SystemStatevar=OPEN_DOOR;
 18e:	f0 92 0c 01 	sts	0x010C, r15
 192:	bc cf       	rjmp	.-136    	; 0x10c <main+0x40>
			  }
			  else if (Choice=='2')
 194:	82 33       	cpi	r24, 0x32	; 50
 196:	61 f4       	brne	.+24     	; 0x1b0 <main+0xe4>
 198:	83 ec       	ldi	r24, 0xC3	; 195
 19a:	99 e0       	ldi	r25, 0x09	; 9
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0xd0>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xd6>
 1a2:	00 00       	nop
			  {
				  _delay_ms(10);
				  UART_SendByte('2');
 1a4:	82 e3       	ldi	r24, 0x32	; 50
 1a6:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
				  SystemStatevar=CLOSE_DOOR;
 1aa:	e0 92 0c 01 	sts	0x010C, r14
 1ae:	ae cf       	rjmp	.-164    	; 0x10c <main+0x40>
			  } 
			  else if (Choice=='3')
 1b0:	83 33       	cpi	r24, 0x33	; 51
 1b2:	19 f4       	brne	.+6      	; 0x1ba <main+0xee>
			  {
				  SystemStatevar=CHANGE_PWD;
 1b4:	00 93 0c 01 	sts	0x010C, r16
 1b8:	a9 cf       	rjmp	.-174    	; 0x10c <main+0x40>
			  } 
			  else 
			  {
				  LCD_ClearScreen();
 1ba:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
				  LCD_DisplayString_XY("wrong choice",0xc0,0);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	60 ec       	ldi	r22, 0xC0	; 192
 1c2:	80 e6       	ldi	r24, 0x60	; 96
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 1ca:	9f e3       	ldi	r25, 0x3F	; 63
 1cc:	2d e0       	ldi	r18, 0x0D	; 13
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x104>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x10e>
 1da:	00 00       	nop
				  _delay_ms(1000);
				  LCD_ClearScreen(); 
 1dc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
				  SystemStatevar=OPTION_MENU;
 1e0:	10 93 0c 01 	sts	0x010C, r17
 1e4:	93 cf       	rjmp	.-218    	; 0x10c <main+0x40>
			  }
			 break;
//================== Open Door Case ===================//
		case OPEN_DOOR:
			UART_SendByte(OPEN_DOOR_1);
 1e6:	88 e5       	ldi	r24, 0x58	; 88
 1e8:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
			OpenDoor();	  
 1ec:	0e 94 3c 02 	call	0x478	; 0x478 <OpenDoor>
			SystemStatevar=REPEAT_PWD;
 1f0:	c0 93 0c 01 	sts	0x010C, r28
			break;
 1f4:	8b cf       	rjmp	.-234    	; 0x10c <main+0x40>
//================== Close Door Case ==================//			 
		case CLOSE_DOOR:
			UART_SendByte(CLOSE_DOOR_1);
 1f6:	89 e5       	ldi	r24, 0x59	; 89
 1f8:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
			CloseDoor();
 1fc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <CloseDoor>
			SystemStatevar=REPEAT_PWD;
 200:	c0 93 0c 01 	sts	0x010C, r28
			break;
 204:	83 cf       	rjmp	.-250    	; 0x10c <main+0x40>
//================= System Lock Case =================//
		case SYSTEM_LOCK:
		    System_error();
 206:	0e 94 64 02 	call	0x4c8	; 0x4c8 <System_error>
			LED_RED_OFF();
 20a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LED_RED_OFF>
			LED_GREEN_OFF();
 20e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LED_GREEN_OFF>
			break;
 212:	7c cf       	rjmp	.-264    	; 0x10c <main+0x40>
//============= Changing Password Case  ==============//
		case CHANGE_PWD:
		UART_SendByte(CHANGE_PWD_1);
 214:	87 e5       	ldi	r24, 0x57	; 87
 216:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
		   LCD_ClearScreen();
 21a:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 21e:	9f e9       	ldi	r25, 0x9F	; 159
 220:	26 e8       	ldi	r18, 0x86	; 134
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	91 50       	subi	r25, 0x01	; 1
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x158>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x162>
 22e:	00 00       	nop
		   _delay_ms(500);
		   Scan_Pass_Repeat();
 230:	0e 94 93 01 	call	0x326	; 0x326 <Scan_Pass_Repeat>
		   Check_Pwd=UART_RecieveByte();
 234:	0e 94 a2 02 	call	0x544	; 0x544 <UART_RecieveByte>
		   if (Check_Pwd==RIGHT_PASSWORD_1)
 238:	84 35       	cpi	r24, 0x54	; 84
 23a:	29 f4       	brne	.+10     	; 0x246 <main+0x17a>
		   {
			   Correct_Pwd();
 23c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Correct_Pwd>
			   SystemStatevar=NEW_PWD;
 240:	10 92 0c 01 	sts	0x010C, r1
 244:	63 cf       	rjmp	.-314    	; 0x10c <main+0x40>
		   }
		   else
		   {
			   count_wrong++;
 246:	df 5f       	subi	r29, 0xFF	; 255
			   Wrong_Pwd();
 248:	0e 94 00 02 	call	0x400	; 0x400 <Wrong_Pwd>
			   if (count_wrong==3)
 24c:	d3 30       	cpi	r29, 0x03	; 3
 24e:	11 f4       	brne	.+4      	; 0x254 <main+0x188>
			   {
				   System_error();
 250:	0e 94 64 02 	call	0x4c8	; 0x4c8 <System_error>
			   }
			   
			   LCD_DisplayString_XY("Enter pass again",0xc0,0);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	60 ec       	ldi	r22, 0xC0	; 192
 258:	8d e6       	ldi	r24, 0x6D	; 109
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 260:	9f e3       	ldi	r25, 0x3F	; 63
 262:	2d e0       	ldi	r18, 0x0D	; 13
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	91 50       	subi	r25, 0x01	; 1
 268:	20 40       	sbci	r18, 0x00	; 0
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x19a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x1a4>
 270:	00 00       	nop
			   _delay_ms(1000);
			   LCD_ClearScreen();
 272:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 276:	4a cf       	rjmp	.-364    	; 0x10c <main+0x40>

00000278 <Scan_Pass_First>:
u8_t i;
u8_t First_Password[4];
u8_t Repeat_Password[4];

void Scan_Pass_First(void)
{
 278:	cf 93       	push	r28
	LCD_DisplayString_XY("Plz enter a pass",0xC0,0);
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	60 ec       	ldi	r22, 0xC0	; 192
 27e:	8e e7       	ldi	r24, 0x7E	; 126
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
	LCD_SendCommand(0x90+5);
 286:	85 e9       	ldi	r24, 0x95	; 149
 288:	0e 94 19 03 	call	0x632	; 0x632 <LCD_SendCommand>
	
	for (i=0;i<4;i++)
 28c:	10 92 11 01 	sts	0x0111, r1
 290:	c0 e0       	ldi	r28, 0x00	; 0
	{
		First_Password[i]=Key_Pressed(Get_Key());
 292:	0e 94 a6 02 	call	0x54c	; 0x54c <Get_Key>
 296:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Key_Pressed>
 29a:	ec 2f       	mov	r30, r28
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	ee 5e       	subi	r30, 0xEE	; 238
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 83       	st	Z, r24
		LCD_DisplayCharacter('*');
 2a4:	8a e2       	ldi	r24, 0x2A	; 42
 2a6:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_DisplayCharacter>
void Scan_Pass_First(void)
{
	LCD_DisplayString_XY("Plz enter a pass",0xC0,0);
	LCD_SendCommand(0x90+5);
	
	for (i=0;i<4;i++)
 2aa:	e0 91 11 01 	lds	r30, 0x0111
 2ae:	ef 5f       	subi	r30, 0xFF	; 255
 2b0:	e0 93 11 01 	sts	0x0111, r30
 2b4:	e4 30       	cpi	r30, 0x04	; 4
 2b6:	10 f4       	brcc	.+4      	; 0x2bc <Scan_Pass_First+0x44>
 2b8:	ce 2f       	mov	r28, r30
 2ba:	eb cf       	rjmp	.-42     	; 0x292 <Scan_Pass_First+0x1a>
	{
		First_Password[i]=Key_Pressed(Get_Key());
		LCD_DisplayCharacter('*');
	}
	
	LCD_ClearScreen();
 2bc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 2c0:	2f e9       	ldi	r18, 0x9F	; 159
 2c2:	86 e8       	ldi	r24, 0x86	; 134
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <Scan_Pass_First+0x4e>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <Scan_Pass_First+0x58>
 2d0:	00 00       	nop
	_delay_ms(500);
	
 	for (i=0;i<4;i++)
 2d2:	10 92 11 01 	sts	0x0111, r1
 2d6:	e0 e0       	ldi	r30, 0x00	; 0
 	{
 		UART_SendByte(First_Password[i]);
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ee 5e       	subi	r30, 0xEE	; 238
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 81       	ld	r24, Z
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <Scan_Pass_First+0x72>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <Scan_Pass_First+0x78>
 2f0:	00 00       	nop
	}
	
	LCD_ClearScreen();
	_delay_ms(500);
	
 	for (i=0;i<4;i++)
 2f2:	e0 91 11 01 	lds	r30, 0x0111
 2f6:	ef 5f       	subi	r30, 0xFF	; 255
 2f8:	e0 93 11 01 	sts	0x0111, r30
 2fc:	e4 30       	cpi	r30, 0x04	; 4
 2fe:	60 f3       	brcs	.-40     	; 0x2d8 <Scan_Pass_First+0x60>
 	{
 		UART_SendByte(First_Password[i]);
 		_delay_ms(50);
 	}
	 
	LCD_DisplayString_XY("Ur Pass Is Saved",0xc0,0);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	60 ec       	ldi	r22, 0xC0	; 192
 304:	8f e8       	ldi	r24, 0x8F	; 143
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 30c:	9f e3       	ldi	r25, 0x3F	; 63
 30e:	2d e0       	ldi	r18, 0x0D	; 13
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	91 50       	subi	r25, 0x01	; 1
 314:	20 40       	sbci	r18, 0x00	; 0
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <Scan_Pass_First+0x9a>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <Scan_Pass_First+0xa4>
 31c:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearScreen();
 31e:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <Scan_Pass_Repeat>:

void Scan_Pass_Repeat(void)
{
 326:	cf 93       	push	r28
	LCD_DisplayString_XY("Enter pass again",0xc0,0);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	60 ec       	ldi	r22, 0xC0	; 192
 32c:	8d e6       	ldi	r24, 0x6D	; 109
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
	LCD_SendCommand(0x90+5);
 334:	85 e9       	ldi	r24, 0x95	; 149
 336:	0e 94 19 03 	call	0x632	; 0x632 <LCD_SendCommand>
	
	for (i=0;i<4;i++)
 33a:	10 92 11 01 	sts	0x0111, r1
 33e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Repeat_Password[i]=Key_Pressed(Get_Key());
 340:	0e 94 a6 02 	call	0x54c	; 0x54c <Get_Key>
 344:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Key_Pressed>
 348:	ec 2f       	mov	r30, r28
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	e3 5f       	subi	r30, 0xF3	; 243
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	80 83       	st	Z, r24
		LCD_DisplayCharacter('*');
 352:	8a e2       	ldi	r24, 0x2A	; 42
 354:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_DisplayCharacter>
void Scan_Pass_Repeat(void)
{
	LCD_DisplayString_XY("Enter pass again",0xc0,0);
	LCD_SendCommand(0x90+5);
	
	for (i=0;i<4;i++)
 358:	e0 91 11 01 	lds	r30, 0x0111
 35c:	ef 5f       	subi	r30, 0xFF	; 255
 35e:	e0 93 11 01 	sts	0x0111, r30
 362:	e4 30       	cpi	r30, 0x04	; 4
 364:	10 f4       	brcc	.+4      	; 0x36a <Scan_Pass_Repeat+0x44>
 366:	ce 2f       	mov	r28, r30
 368:	eb cf       	rjmp	.-42     	; 0x340 <Scan_Pass_Repeat+0x1a>
	{
		Repeat_Password[i]=Key_Pressed(Get_Key());
		LCD_DisplayCharacter('*');
	}
	
	UART_SendByte(Repeat_Password[0]);
 36a:	80 91 0d 01 	lds	r24, 0x010D
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
 374:	83 ed       	ldi	r24, 0xD3	; 211
 376:	90 e3       	ldi	r25, 0x30	; 48
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <Scan_Pass_Repeat+0x52>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <Scan_Pass_Repeat+0x58>
 37e:	00 00       	nop
	_delay_ms(50);
	UART_SendByte(Repeat_Password[1]);
 380:	80 91 0e 01 	lds	r24, 0x010E
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
 38a:	83 ed       	ldi	r24, 0xD3	; 211
 38c:	90 e3       	ldi	r25, 0x30	; 48
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <Scan_Pass_Repeat+0x68>
 392:	00 c0       	rjmp	.+0      	; 0x394 <Scan_Pass_Repeat+0x6e>
 394:	00 00       	nop
	_delay_ms(50);
	UART_SendByte(Repeat_Password[2]);
 396:	80 91 0f 01 	lds	r24, 0x010F
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
 3a0:	83 ed       	ldi	r24, 0xD3	; 211
 3a2:	90 e3       	ldi	r25, 0x30	; 48
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <Scan_Pass_Repeat+0x7e>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <Scan_Pass_Repeat+0x84>
 3aa:	00 00       	nop
	_delay_ms(50);
	UART_SendByte(Repeat_Password[3]);
 3ac:	80 91 10 01 	lds	r24, 0x0110
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
 3b6:	83 ed       	ldi	r24, 0xD3	; 211
 3b8:	90 e3       	ldi	r25, 0x30	; 48
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <Scan_Pass_Repeat+0x94>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <Scan_Pass_Repeat+0x9a>
 3c0:	00 00       	nop
	_delay_ms(50);
		
	LCD_ClearScreen();
 3c2:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
}
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <Recieve_PWD_Comp>:
 	return CheckPwd; 	
 }
u8_t Recieve_PWD_Comp(void)
{
	u8_t Check;
	Check=UART_RecieveByte();
 3ca:	0e 94 a2 02 	call	0x544	; 0x544 <UART_RecieveByte>
 3ce:	e5 ea       	ldi	r30, 0xA5	; 165
 3d0:	fe e0       	ldi	r31, 0x0E	; 14
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <Recieve_PWD_Comp+0x8>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <Recieve_PWD_Comp+0xe>
 3d8:	00 00       	nop
	_delay_ms(15);
	return Check;
}
 3da:	08 95       	ret

000003dc <Correct_Pwd>:
void Correct_Pwd(void)
{
	LCD_DisplayString_XY("Right PASSWORD",0xc0,1);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	60 ec       	ldi	r22, 0xC0	; 192
 3e0:	80 ea       	ldi	r24, 0xA0	; 160
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 3e8:	2f e3       	ldi	r18, 0x3F	; 63
 3ea:	8d e0       	ldi	r24, 0x0D	; 13
 3ec:	93 e0       	ldi	r25, 0x03	; 3
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <Correct_Pwd+0x12>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <Correct_Pwd+0x1c>
 3f8:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearScreen();
 3fa:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 3fe:	08 95       	ret

00000400 <Wrong_Pwd>:
}

void Wrong_Pwd(void)
{
	LCD_DisplayString_XY("Wrong PASSWORD",0xc0,1);
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	60 ec       	ldi	r22, 0xC0	; 192
 404:	8f ea       	ldi	r24, 0xAF	; 175
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 40c:	2f e3       	ldi	r18, 0x3F	; 63
 40e:	8d e0       	ldi	r24, 0x0D	; 13
 410:	93 e0       	ldi	r25, 0x03	; 3
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <Wrong_Pwd+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <Wrong_Pwd+0x1c>
 41c:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearScreen();
 41e:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 422:	08 95       	ret

00000424 <Option_Menu>:
}


u8_t Option_Menu(void)
{
 424:	cf 93       	push	r28
	u8_t X;
	LCD_DisplayString_XY("If u want to:",0x80,0);
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	60 e8       	ldi	r22, 0x80	; 128
 42a:	8e eb       	ldi	r24, 0xBE	; 190
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
	LCD_DisplayString_XY("1 Open door",0xc0,2);
 432:	42 e0       	ldi	r20, 0x02	; 2
 434:	60 ec       	ldi	r22, 0xC0	; 192
 436:	8c ec       	ldi	r24, 0xCC	; 204
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
	LCD_DisplayString_XY("2 Close door",0x90,2);
 43e:	42 e0       	ldi	r20, 0x02	; 2
 440:	60 e9       	ldi	r22, 0x90	; 144
 442:	88 ed       	ldi	r24, 0xD8	; 216
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
	LCD_DisplayString_XY("3 Change pass.",0xD0,2);
 44a:	42 e0       	ldi	r20, 0x02	; 2
 44c:	60 ed       	ldi	r22, 0xD0	; 208
 44e:	85 ee       	ldi	r24, 0xE5	; 229
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
	X=Key_Pressed(Get_Key());
 456:	0e 94 a6 02 	call	0x54c	; 0x54c <Get_Key>
 45a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Key_Pressed>
 45e:	c8 2f       	mov	r28, r24
	UART_SendByte(X);
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 98 02 	call	0x530	; 0x530 <UART_SendByte>
 466:	87 e8       	ldi	r24, 0x87	; 135
 468:	93 e1       	ldi	r25, 0x13	; 19
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__stack+0x11>
 470:	00 00       	nop
	_delay_ms(20);
	return(X);
}
 472:	8c 2f       	mov	r24, r28
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <OpenDoor>:

void OpenDoor(void)
{
	LCD_ClearScreen();
 478:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
	LCD_DisplayString_XY("DOOR OPEND",0xc0,0);
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	60 ec       	ldi	r22, 0xC0	; 192
 480:	84 ef       	ldi	r24, 0xF4	; 244
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 488:	2f e3       	ldi	r18, 0x3F	; 63
 48a:	8d e0       	ldi	r24, 0x0D	; 13
 48c:	93 e0       	ldi	r25, 0x03	; 3
 48e:	21 50       	subi	r18, 0x01	; 1
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <OpenDoor+0x16>
 496:	00 c0       	rjmp	.+0      	; 0x498 <OpenDoor+0x20>
 498:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearScreen();
 49a:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 49e:	08 95       	ret

000004a0 <CloseDoor>:
}

void CloseDoor(void)
{
	LCD_ClearScreen();
 4a0:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
	LCD_DisplayString_XY("DOOR CLOSED",0xc0,0);
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	60 ec       	ldi	r22, 0xC0	; 192
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayString_XY>
 4b0:	2f e3       	ldi	r18, 0x3F	; 63
 4b2:	8d e0       	ldi	r24, 0x0D	; 13
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <CloseDoor+0x16>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <CloseDoor+0x20>
 4c0:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearScreen();
 4c2:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
 4c6:	08 95       	ret

000004c8 <System_error>:
}
void System_error(void)
{
	LCD_ClearScreen();
 4c8:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
	LCD_DisplayString("");	
 4cc:	83 ef       	ldi	r24, 0xF3	; 243
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 42 03 	call	0x684	; 0x684 <LCD_DisplayString>
	
	while(1)
	{
		Buzzer_ON();
 4d4:	0e 94 62 00 	call	0xc4	; 0xc4 <Buzzer_ON>
		LED_YELL_ON();
 4d8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <LED_YELL_ON>
 4dc:	87 ea       	ldi	r24, 0xA7	; 167
 4de:	91 e6       	ldi	r25, 0x61	; 97
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <System_error+0x18>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <System_error+0x1e>
 4e6:	00 00       	nop
		_delay_ms(100);
		Buzzer_OFF();
 4e8:	0e 94 64 00 	call	0xc8	; 0xc8 <Buzzer_OFF>
		LED_YELL_OFF();
 4ec:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LED_YELL_OFF>
 4f0:	87 ea       	ldi	r24, 0xA7	; 167
 4f2:	91 e6       	ldi	r25, 0x61	; 97
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <System_error+0x2c>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <System_error+0x32>
 4fa:	00 00       	nop
 4fc:	eb cf       	rjmp	.-42     	; 0x4d4 <System_error+0xc>

000004fe <UART_Init>:



void UART_Init()
{
	CLR_BIT(UCSRA,U2X);
 4fe:	59 98       	cbi	0x0b, 1	; 11
	
	UBRRL=12;
 500:	8c e0       	ldi	r24, 0x0C	; 12
 502:	89 b9       	out	0x09, r24	; 9
	
	SET_BIT(UCSRB,TXEN);
 504:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
 506:	54 9a       	sbi	0x0a, 4	; 10
	CLR_BIT(UCSRB,UCSZ2);
 508:	52 98       	cbi	0x0a, 2	; 10
	
	SET_BIT(UCSRC,URSEL);
 50a:	80 b5       	in	r24, 0x20	; 32
 50c:	80 68       	ori	r24, 0x80	; 128
 50e:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,UPM0);
 510:	80 b5       	in	r24, 0x20	; 32
 512:	8f 7e       	andi	r24, 0xEF	; 239
 514:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,UPM1);
 516:	80 b5       	in	r24, 0x20	; 32
 518:	8f 7d       	andi	r24, 0xDF	; 223
 51a:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRC,USBS);
 51c:	80 b5       	in	r24, 0x20	; 32
 51e:	87 7f       	andi	r24, 0xF7	; 247
 520:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ1);
 522:	80 b5       	in	r24, 0x20	; 32
 524:	84 60       	ori	r24, 0x04	; 4
 526:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,UCSZ0);
 528:	80 b5       	in	r24, 0x20	; 32
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	80 bd       	out	0x20, r24	; 32
 52e:	08 95       	ret

00000530 <UART_SendByte>:
}


void UART_SendByte(s8_t Data)
{
	while(!(UCSRA & (1<<UDRE)));
 530:	5d 9b       	sbis	0x0b, 5	; 11
 532:	fe cf       	rjmp	.-4      	; 0x530 <UART_SendByte>
	UDR=Data;
 534:	8c b9       	out	0x0c, r24	; 12
 536:	83 ec       	ldi	r24, 0xC3	; 195
 538:	99 e0       	ldi	r25, 0x09	; 9
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <UART_SendByte+0xa>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <UART_SendByte+0x10>
 540:	00 00       	nop
 542:	08 95       	ret

00000544 <UART_RecieveByte>:
}

s8_t UART_RecieveByte()
{
	s8_t temp;
	while(!(UCSRA & (1<<RXC)));
 544:	5f 9b       	sbis	0x0b, 7	; 11
 546:	fe cf       	rjmp	.-4      	; 0x544 <UART_RecieveByte>
	temp = UDR;
 548:	8c b1       	in	r24, 0x0c	; 12
	return temp;
 54a:	08 95       	ret

0000054c <Get_Key>:
	//keypad connected on PORTA
	//connect coloumns on PINS from (PD0-PD3),make these PINS as o/p pins
	//connect rows on PINS from(PD4-PD7),make these PINS as i/p pins with HIGH Impedance
	u8_t row_count = 0;//counter of rows
	u8_t col_count = 0;//counter of coloums
	KEYPAD_DDR &= (~0x0f);
 54c:	87 b3       	in	r24, 0x17	; 23
 54e:	80 7f       	andi	r24, 0xF0	; 240
 550:	87 bb       	out	0x17, r24	; 23
	KEYPAD_PORT = 0xf0; // Activate PULL-UP resistance on PINS(PD4-PD7)
 552:	80 ef       	ldi	r24, 0xF0	; 240
 554:	88 bb       	out	0x18, r24	; 24
	while(1)
	{
		for(col_count = 0;col_count < MAXCOL;col_count++)
 556:	80 e0       	ldi	r24, 0x00	; 0
		{
			KEYPAD_DDR = 1<<col_count;
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	70 e0       	ldi	r23, 0x00	; 0
			for(row_count = 0;row_count < MAXROW;row_count++)
			{
				if(!(KEYPAD_PIN & (1<<row_count + 4) ) )
 55c:	a5 e0       	ldi	r26, 0x05	; 5
 55e:	f0 e0       	ldi	r31, 0x00	; 0
	u8_t col_count = 0;//counter of coloums
	KEYPAD_DDR &= (~0x0f);
	KEYPAD_PORT = 0xf0; // Activate PULL-UP resistance on PINS(PD4-PD7)
	while(1)
	{
		for(col_count = 0;col_count < MAXCOL;col_count++)
 560:	b0 e0       	ldi	r27, 0x00	; 0
		{
			KEYPAD_DDR = 1<<col_count;
 562:	9b 01       	movw	r18, r22
 564:	08 2e       	mov	r0, r24
 566:	02 c0       	rjmp	.+4      	; 0x56c <Get_Key+0x20>
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <Get_Key+0x1c>
 570:	27 bb       	out	0x17, r18	; 23
			for(row_count = 0;row_count < MAXROW;row_count++)
			{
				if(!(KEYPAD_PIN & (1<<row_count + 4) ) )
 572:	b4 9b       	sbis	0x16, 4	; 22
 574:	10 c0       	rjmp	.+32     	; 0x596 <Get_Key+0x4a>
 576:	2a 2f       	mov	r18, r26
 578:	3f 2f       	mov	r19, r31
 57a:	9c ef       	ldi	r25, 0xFC	; 252
 57c:	92 0f       	add	r25, r18
 57e:	46 b3       	in	r20, 0x16	; 22
 580:	e2 2f       	mov	r30, r18
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	02 2e       	mov	r0, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <Get_Key+0x40>
 588:	55 95       	asr	r21
 58a:	47 95       	ror	r20
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <Get_Key+0x3c>
 590:	40 fd       	sbrc	r20, 0
 592:	16 c0       	rjmp	.+44     	; 0x5c0 <Get_Key+0x74>
 594:	02 c0       	rjmp	.+4      	; 0x59a <Get_Key+0x4e>
 596:	e4 e0       	ldi	r30, 0x04	; 4
	while(1)
	{
		for(col_count = 0;col_count < MAXCOL;col_count++)
		{
			KEYPAD_DDR = 1<<col_count;
			for(row_count = 0;row_count < MAXROW;row_count++)
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	a9 01       	movw	r20, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <Get_Key+0x5a>
 5a2:	44 0f       	add	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	ea 95       	dec	r30
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <Get_Key+0x56>
			{
				if(!(KEYPAD_PIN & (1<<row_count + 4) ) )
				{
					while(! (KEYPAD_PIN & (1<<row_count + 4) ) ); //get only one number per press
 5aa:	26 b3       	in	r18, 0x16	; 22
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	24 23       	and	r18, r20
 5b0:	35 23       	and	r19, r21
 5b2:	23 2b       	or	r18, r19
 5b4:	d1 f3       	breq	.-12     	; 0x5aa <Get_Key+0x5e>
					return ((row_count*4)+col_count+1);
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	99 0f       	add	r25, r25
 5ba:	99 0f       	add	r25, r25
 5bc:	89 0f       	add	r24, r25
 5be:	08 95       	ret
 5c0:	2f 5f       	subi	r18, 0xFF	; 255
 5c2:	3f 4f       	sbci	r19, 0xFF	; 255
	while(1)
	{
		for(col_count = 0;col_count < MAXCOL;col_count++)
		{
			KEYPAD_DDR = 1<<col_count;
			for(row_count = 0;row_count < MAXROW;row_count++)
 5c4:	28 30       	cpi	r18, 0x08	; 8
 5c6:	31 05       	cpc	r19, r1
 5c8:	c1 f6       	brne	.-80     	; 0x57a <Get_Key+0x2e>
	u8_t col_count = 0;//counter of coloums
	KEYPAD_DDR &= (~0x0f);
	KEYPAD_PORT = 0xf0; // Activate PULL-UP resistance on PINS(PD4-PD7)
	while(1)
	{
		for(col_count = 0;col_count < MAXCOL;col_count++)
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	84 30       	cpi	r24, 0x04	; 4
 5ce:	48 f2       	brcs	.-110    	; 0x562 <Get_Key+0x16>
 5d0:	8b 2f       	mov	r24, r27
 5d2:	c7 cf       	rjmp	.-114    	; 0x562 <Get_Key+0x16>

000005d4 <Key_Pressed>:
}

u8_t Key_Pressed(u8_t value)
{
	u8_t key=0;
	switch(value)
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	fc 01       	movw	r30, r24
 5d8:	31 97       	sbiw	r30, 0x01	; 1
 5da:	e0 31       	cpi	r30, 0x10	; 16
 5dc:	f1 05       	cpc	r31, r1
 5de:	20 f4       	brcc	.+8      	; 0x5e8 <Key_Pressed+0x14>
 5e0:	ef 5c       	subi	r30, 0xCF	; 207
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__tablejump2__>
	}
}

u8_t Key_Pressed(u8_t value)
{
	u8_t key=0;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
	switch(value)
	{
		case 1:key = '7';
		break;
		case 2:key = '4';
 5ec:	84 e3       	ldi	r24, 0x34	; 52
		break;
 5ee:	08 95       	ret
		case 3:key = '1';
 5f0:	81 e3       	ldi	r24, 0x31	; 49
		break;
 5f2:	08 95       	ret
		case 4:key = 'c';
 5f4:	83 e6       	ldi	r24, 0x63	; 99
		break;
 5f6:	08 95       	ret
		case 5:key = '8';
 5f8:	88 e3       	ldi	r24, 0x38	; 56
		break;
 5fa:	08 95       	ret
		case 6:key = '5';
 5fc:	85 e3       	ldi	r24, 0x35	; 53
		break;
 5fe:	08 95       	ret
		case 7:key = '2';
 600:	82 e3       	ldi	r24, 0x32	; 50
		break;
 602:	08 95       	ret
		case 8:key = '0';
 604:	80 e3       	ldi	r24, 0x30	; 48
		break;
 606:	08 95       	ret
		case 9:key = '9';
 608:	89 e3       	ldi	r24, 0x39	; 57
		break;
 60a:	08 95       	ret
		case 10:key = '6';
 60c:	86 e3       	ldi	r24, 0x36	; 54
		break;
 60e:	08 95       	ret
		case 11:key = '3';
 610:	83 e3       	ldi	r24, 0x33	; 51
		break;
 612:	08 95       	ret
		case 12:key = '=';
 614:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 616:	08 95       	ret
		case 13:key = '%';
 618:	85 e2       	ldi	r24, 0x25	; 37
		break;
 61a:	08 95       	ret
		case 14:key = '*';
 61c:	8a e2       	ldi	r24, 0x2A	; 42
		break;
 61e:	08 95       	ret
		case 15:key = '-';
 620:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 622:	08 95       	ret
		case 16:key = '+';
 624:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 626:	08 95       	ret
u8_t Key_Pressed(u8_t value)
{
	u8_t key=0;
	switch(value)
	{
		case 1:key = '7';
 628:	87 e3       	ldi	r24, 0x37	; 55
		break;
		case 16:key = '+';
		break;
	}
	return key;
 62a:	08 95       	ret

0000062c <LCD_Enable>:
#include "LCD_Config.h"


void LCD_Enable(void)
{
	SET_BIT(LCD_C_PORT,LCD_E_PIN_NO);
 62c:	a8 9a       	sbi	0x15, 0	; 21
	CLR_BIT(LCD_C_PORT,LCD_E_PIN_NO);
 62e:	a8 98       	cbi	0x15, 0	; 21
 630:	08 95       	ret

00000632 <LCD_SendCommand>:
}

void LCD_SendCommand(u8_t command)
{
	LCD_D_PORT= command;
 632:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(LCD_C_PORT,LCD_RS_PIN_NO);
 634:	aa 98       	cbi	0x15, 2	; 21
	LCD_Enable();
 636:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_Enable>
 63a:	81 ee       	ldi	r24, 0xE1	; 225
 63c:	94 e0       	ldi	r25, 0x04	; 4
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <LCD_SendCommand+0xc>
 642:	00 c0       	rjmp	.+0      	; 0x644 <LCD_SendCommand+0x12>
 644:	00 00       	nop
 646:	08 95       	ret

00000648 <LCD_ClearScreen>:
	_delay_ms(5);
}
void LCD_ClearScreen(void)
{
	LCD_SendCommand(1);
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 19 03 	call	0x632	; 0x632 <LCD_SendCommand>
 64e:	08 95       	ret

00000650 <LCD_Init>:
}
void LCD_Init(void)
{
	LCD_D_DDR=0xFF;
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	8a bb       	out	0x1a, r24	; 26
	LCD_C_DDR=0x07;
 654:	87 e0       	ldi	r24, 0x07	; 7
 656:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(LCD_C_PORT,LCD_RW_PIN_NO);
 658:	a9 98       	cbi	0x15, 1	; 21
	CLR_BIT(LCD_C_PORT,LCD_RS_PIN_NO);
 65a:	aa 98       	cbi	0x15, 2	; 21
	LCD_ClearScreen();
 65c:	0e 94 24 03 	call	0x648	; 0x648 <LCD_ClearScreen>
	LCD_SendCommand(MODE_8_BIT);
 660:	88 e3       	ldi	r24, 0x38	; 56
 662:	0e 94 19 03 	call	0x632	; 0x632 <LCD_SendCommand>
	LCD_SendCommand(DISPLAYON_CURSORON);
 666:	8e e0       	ldi	r24, 0x0E	; 14
 668:	0e 94 19 03 	call	0x632	; 0x632 <LCD_SendCommand>
 66c:	08 95       	ret

0000066e <LCD_DisplayCharacter>:
}
void LCD_DisplayCharacter(u8_t data)
{
	LCD_D_PORT= data;
 66e:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(LCD_C_PORT,LCD_RS_PIN_NO);
 670:	aa 9a       	sbi	0x15, 2	; 21
	LCD_Enable();
 672:	0e 94 16 03 	call	0x62c	; 0x62c <LCD_Enable>
 676:	81 ee       	ldi	r24, 0xE1	; 225
 678:	94 e0       	ldi	r25, 0x04	; 4
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_DisplayCharacter+0xc>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <LCD_DisplayCharacter+0x12>
 680:	00 00       	nop
 682:	08 95       	ret

00000684 <LCD_DisplayString>:
	_delay_ms(5);
}
void LCD_DisplayString(u8_t data[])
{
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	ec 01       	movw	r28, r24
	u8_t i=0;
	while (data[i]!='\0')
 68c:	88 81       	ld	r24, Y
 68e:	88 23       	and	r24, r24
 690:	51 f0       	breq	.+20     	; 0x6a6 <LCD_DisplayString+0x22>
	LCD_Enable();
	_delay_ms(5);
}
void LCD_DisplayString(u8_t data[])
{
	u8_t i=0;
 692:	10 e0       	ldi	r17, 0x00	; 0
	while (data[i]!='\0')
	{
		LCD_DisplayCharacter(data[i]);
 694:	0e 94 37 03 	call	0x66e	; 0x66e <LCD_DisplayCharacter>
		i++;
 698:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(5);
}
void LCD_DisplayString(u8_t data[])
{
	u8_t i=0;
	while (data[i]!='\0')
 69a:	fe 01       	movw	r30, r28
 69c:	e1 0f       	add	r30, r17
 69e:	f1 1d       	adc	r31, r1
 6a0:	80 81       	ld	r24, Z
 6a2:	81 11       	cpse	r24, r1
 6a4:	f7 cf       	rjmp	.-18     	; 0x694 <LCD_DisplayString+0x10>
	{
		LCD_DisplayCharacter(data[i]);
		i++;
	}
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	08 95       	ret

000006ae <LCD_DisplayString_XY>:
 void LCD_DisplayString_XY(u8_t *data,u8_t row,u8_t coloum)
{
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	ec 01       	movw	r28, r24

	    LCD_SendCommand(row+coloum);
 6b4:	86 2f       	mov	r24, r22
 6b6:	84 0f       	add	r24, r20
 6b8:	0e 94 19 03 	call	0x632	; 0x632 <LCD_SendCommand>
 6bc:	81 ee       	ldi	r24, 0xE1	; 225
 6be:	94 e0       	ldi	r25, 0x04	; 4
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCD_DisplayString_XY+0x12>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <LCD_DisplayString_XY+0x18>
 6c6:	00 00       	nop
		_delay_ms(5);
		LCD_DisplayString(data);
 6c8:	ce 01       	movw	r24, r28
 6ca:	0e 94 42 03 	call	0x684	; 0x684 <LCD_DisplayString>

}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret

000006d4 <LED_Init>:
#include "LED.h"
#include "common.h"

void LED_Init(void)
{
	SET_BIT(LED_DDR,LED_RED_PIN_NO);
 6d4:	a5 9a       	sbi	0x14, 5	; 20
	SET_BIT(LED_DDR,LED_YELL_PIN_NO);
 6d6:	a3 9a       	sbi	0x14, 3	; 20
	SET_BIT(LED_DDR,LED_GREEN_PIN_NO);
 6d8:	a4 9a       	sbi	0x14, 4	; 20
 6da:	08 95       	ret

000006dc <LED_RED_OFF>:
{
	SET_BIT(LED_PORT,LED_RED_PIN_NO);
}
void LED_RED_OFF(void)
{
	CLR_BIT(LED_PORT,LED_RED_PIN_NO);
 6dc:	ad 98       	cbi	0x15, 5	; 21
 6de:	08 95       	ret

000006e0 <LED_YELL_ON>:
}
void LED_YELL_ON(void)
{
	SET_BIT(LED_PORT,LED_YELL_PIN_NO);
 6e0:	ab 9a       	sbi	0x15, 3	; 21
 6e2:	08 95       	ret

000006e4 <LED_YELL_OFF>:
}
void LED_YELL_OFF(void)
{
	CLR_BIT(LED_PORT,LED_YELL_PIN_NO);
 6e4:	ab 98       	cbi	0x15, 3	; 21
 6e6:	08 95       	ret

000006e8 <LED_GREEN_OFF>:
{
	SET_BIT(LED_PORT,LED_GREEN_PIN_NO);
}
void LED_GREEN_OFF(void)
{
	CLR_BIT(LED_PORT,LED_GREEN_PIN_NO);
 6e8:	ac 98       	cbi	0x15, 4	; 21
 6ea:	08 95       	ret

000006ec <__tablejump2__>:
 6ec:	ee 0f       	add	r30, r30
 6ee:	ff 1f       	adc	r31, r31

000006f0 <__tablejump__>:
 6f0:	05 90       	lpm	r0, Z+
 6f2:	f4 91       	lpm	r31, Z
 6f4:	e0 2d       	mov	r30, r0
 6f6:	09 94       	ijmp

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
